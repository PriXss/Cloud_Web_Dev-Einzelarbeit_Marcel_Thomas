services:

#--------------------DBs, Blobs, PHPAdmins--------------------------------
  miniorooms:
    image: 'minio/minio:latest'
    ports:
      - '9000:9000'
      - '9090:9090'
    env_file: miniorooms.env
    volumes:
      - './minioRooms:/data'
    command: server --console-address ":9090" /data
    restart: always
    networks:
      - microservices


  minioevents:
    image: 'minio/minio:latest'
    ports:
      - '9001:9000'
      - '9091:9091'
    env_file: minioevents.env
    volumes:
       - './minioEvents:/data'
    command: server --console-address ":9091" /data
    restart: always
    networks:
      - microservices

  minioimpressions:
    image: 'minio/minio:latest'
    ports:
      - '9002:9000'
      - '9092:9092'
    env_file: minioimpressions.env
    volumes:
       - './minioImpressions:/data'
    command: server --console-address ":9092" /data
    restart: always
    networks:
      - microservices

    
  mysqldbhotels:
    platform: linux/x86_64
    image: mysql:5.7   
    container_name: mysqldbrooms
    environment:
      MYSQL_ROOT_PASSWORD: testpassword
      MYSQL_DATABASE: hotelrooms
      MYSQL_USER: test
      MYSQL_PASSWORD: testpassword
      TZ: Europe/Berlin
    ports:
      - "3306:3306"
    volumes:
      - mysqlVolumeHotels:/var/lib/mysql
      - ./database_setup_rooms.sql:/docker-entrypoint-initdb.d/database_setup_rooms.sql
    networks:
      - microservices
      
  phpmyadminhotels:
    platform: linux/x86_64
    image: phpmyadmin/phpmyadmin  
    container_name: phpadminhotels
    environment:
      PMA_HOST: mysqldbhotels
    restart: always
    ports:
      - 8080:80
    networks:
      - microservices


  mysqldbevents:
      platform: linux/x86_64
      image: mysql:5.7   
      container_name: mysqldbevents
      environment:
        MYSQL_ROOT_PASSWORD: testpassword
        MYSQL_DATABASE: events
        MYSQL_USER: test
        MYSQL_PASSWORD: testpassword
        TZ: Europe/Berlin
      ports:
        - "3309:3306"
      volumes:
        - mysqlVolumeEvents:/var/lib/mysql
        - ./database_setup_events.sql:/docker-entrypoint-initdb.d/database_setup_events.sql
      networks:
      - microservices
        
  phpmyadminevents:
      platform: linux/x86_64
      image: phpmyadmin/phpmyadmin  
      container_name: phpadminevents
      environment:
        PMA_HOST: mysqldbevents
      restart: always
      ports:
        - 8081:80
      networks:
      - microservices

  mysqldbimpressions:
      platform: linux/x86_64
      image: mysql:5.7   
      container_name: mysqldbimpressions
      environment:
        MYSQL_ROOT_PASSWORD: testpassword
        MYSQL_DATABASE: impressions
        MYSQL_USER: test
        MYSQL_PASSWORD: testpassword
        TZ: Europe/Berlin
      ports:
        - "3308:3306"
      volumes:
        - mysqlVolumeImpressions:/var/lib/mysql
        - ./database_setup_impressions.sql:/docker-entrypoint-initdb.d/database_setup_impressions.sql
      networks:
      - microservices
        
  phpmyadminimpressions:
      platform: linux/x86_64
      image: phpmyadmin/phpmyadmin  
      container_name: phpadminimpressions
      environment:
        PMA_HOST: mysqldbimpressions
      restart: always
      ports:
        - 8082:80
      networks:
      - microservices

  mysqldborders:
      platform: linux/x86_64
      image: mysql:5.7   
      container_name: mysqldborders
      environment:
        MYSQL_ROOT_PASSWORD: testpassword
        MYSQL_DATABASE: orders
        MYSQL_USER: test
        MYSQL_PASSWORD: testpassword
        TZ: Europe/Berlin
      ports:
        - "3310:3306"
      volumes:
        - mysqlVolumeOrders:/var/lib/mysql
        - ./database_setup_orders.sql:/docker-entrypoint-initdb.d/database_setup_orders.sql
      networks:
      - microservices
        
  phpmyadminorders:
      platform: linux/x86_64
      image: phpmyadmin/phpmyadmin  
      container_name: phpadminorders
      environment:
        PMA_HOST: mysqldborders
      restart: always
      ports:
        - 8087:80
      networks:
      - microservices

#--------------------Backend, Services--------------------------------

  backend:
      build: ../backend/
      ports:
        - "2500:2500"
      restart: always
      container_name: backend
      environment:
        - EVENT=events-service
        - ROOMS=rooms-service
        - IMPRESSIONS=impression-service
        - ORDERS=orders-service
        - WEATHER=weather-service
      networks:
        - microservices


  events-service:
      build: ../microservices/events/
      ports:
        - "9096:9096"
      restart: always
      container_name: events-service
      depends_on:
        - mysqldbevents
      environment:
        - DBCONNECTION=mysqldbevents
      networks:
        - microservices
      

  rooms-service:
      build: ../microservices/hotelrooms/
      ports:
        - "9095:9095"
      restart: always
      container_name: rooms-service
      depends_on:
        - mysqldbhotels
      environment:
        - DBCONNECTION=mysqldbhotels
      networks:
        - microservices


  impression-service:
      build: ../microservices/impressions/
      ports:
        - "9097:9097"
      restart: always
      container_name: impression-service
      depends_on:
        - mysqldbimpressions
      environment:
        - DBCONNECTION=mysqldbimpressions
      networks:
        - microservices

  orders-service:
      build: ../microservices/orders/
      ports:
        - "7766:7766"
      restart: always
      container_name: orders-service
      depends_on:
        - mysqldborders
      environment:
        - DBCONNECTION=mysqldborders
      networks:
        - microservices

  weather-service:
      build: ../microservices/weather/
      ports:
        - "9098:9098"
      restart: always
      container_name: weather-service
      networks:
        - microservices




#--------------------Volumes, Networks--------------------------------

volumes:
  
  mysqlVolumeHotels:
  mysqlVolumeEvents:
  mysqlVolumeImpressions:
  mysqlVolumeOrders:


networks:
  microservices:
    name: microservices